services:
  postgres-db:
    image: postgres
    container_name: postgres
    restart: unless-stopped
    env_file: ./.env
    expose:
      - "$POSTGRES_DB_DOCKER_PORT"
    environment:
      POSTGRES_USER: $USER
      POSTGRES_PASSWORD: $PASSWORD

  pg-admin:
    image: dpage/pgadmin4
    container_name: pg-admin
    restart: unless-stopped
    depends_on:
      - postgres-db
    env_file: ./.env
    ports:
      - "$PGADMIN_LOCAL_PORT:$PGADMIN_DOCKER_PORT"
    environment:
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
      - PGADMIN_CONFIG_SERVER_MODE=False
    entrypoint: >
      /bin/sh -c '
      chmod 600 /tmp/pgpass;
      /entrypoint.sh'
    user: root
    configs:
      - source: servers.json
        target: /pgadmin4/servers.json
      - source: pgpass
        target: /tmp/pgpass
      - source: preferences.json
        target: /pgadmin4/preferences.json

  minio:
    image: minio/minio
    container_name: minio
    restart: unless-stopped
    depends_on:
      - postgres-db
    env_file: ./.env
    ports:
      - "$MINIO_SERVER_PORT:$MINIO_SERVER_PORT"
      - "$MINIO_CONSOLE_PORT:$MINIO_CONSOLE_PORT"
    environment:
      - MINIO_ROOT_USER=$USER
      - MINIO_ROOT_PASSWORD=$PASSWORD
      - MINIO_UPDATE=off
    volumes:
      - ./backend/minio/data:/data
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"

  minio-setup:
    image: minio/minio
    container_name: minio-startup
    depends_on:
      - minio
    restart: no
    volumes:
      - ./backend/minio/config:/tmp
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://minio:9000/minio/health/live; }                                                                         # check if Minio is alive
        while ! isAlive; do sleep 0.1; done                                                                                                 # wait until Minio is alive
        /usr/bin/mc alias set minio http://minio:${MINIO_SERVER_PORT} ${USER} ${PASSWORD}                                                   # setup Minio client
        /usr/bin/mc mb minio/${MINIO_BUCKET} || true                                                                                        # create bucket
        /usr/bin/mc anonymous set public minio/${MINIO_BUCKET}                                                                              # make the bucket public
        /usr/bin/mc ilm import minio/${MINIO_BUCKET} < /tmp/lifecycle.json                                                                  # adding lifecycle config for bucket to extend file expiry
        /usr/bin/mc admin user svcacct add --access-key "${MINIO_ACCESS_KEY_0}" --secret-key "${MINIO_SECRET_KEY_0}" minio ${USER}          # add access and secret key
        exit 0;
      '
  spring-boot:
    build: ./backend/byteBlog
    container_name: spring-boot
    depends_on:
      - postgres-db
      - minio-setup
    restart: on-failure
    env_file: ./.env
    ports:
      - "$SPRING_LOCAL_PORT:$SPRING_DOCKER_PORT"
    environment:
      SPRING_APPLICATION_JSON: '{
                    "server.port": $SPRING_DOCKER_PORT,
                    "client.port": $ANGULAR_LOCAL_PORT,
                    "minio.url": "http://minio:$MINIO_SERVER_PORT",
                    "minio.credentials.username": "$USER",
                    "minio.credentials.password": "$PASSWORD",
                    "minio.bucket.name": "$MINIO_BUCKET",
                    "spring.datasource.url" : "jdbc:postgresql://postgres:$POSTGRES_DB_DOCKER_PORT/byte-blog-db",
                    "spring.datasource.username" : "$USER",
                    "spring.datasource.password" : "$PASSWORD"
                    }'
    stdin_open: true
    tty: true

  run-populate-scripts:
    image: alpine/curl
    container_name: populate
    depends_on:
      - spring-boot
    restart: no
    volumes:
      - ./backend/populate:/data/populate
    entrypoint: >
      /bin/sh -c '
          isAlive() { curl --silent --request GET http://spring-boot:${SPRING_DOCKER_PORT}/actuator/health | grep UP; }
          while ! isAlive; do sleep 1; done
          cd /data/populate
          sh uploadToMinio.sh
          exit 0;
      '

  angular:
    build: ./client
    container_name: angular-nginx
    depends_on:
      - run-populate-scripts
    ports:
      - $ANGULAR_LOCAL_PORT:$ANGULAR_DOCKER_PORT

configs:
  pgpass:
    content: postgres-db:$POSTGRES_DB_DOCKER_PORT:*:$USER:$PASSWORD
  servers.json:
    content: >-
      {
        "Servers": {
          "1": {
            "Name": "Code Node Server",
            "Group": "Servers",
            "Port": ${POSTGRES_DB_DOCKER_PORT},
            "Username": "${USER}",
            "Host": "postgres-db",
            "MaintenanceDB": "postgres",
            "PassFile": "/tmp/pgpass",
            "SSLMode": "prefer"
          }
        }
      }
  preferences.json:
    content: >-
      {
        "preferences": {
          "misc:themes:theme": "dark"
        }
      }